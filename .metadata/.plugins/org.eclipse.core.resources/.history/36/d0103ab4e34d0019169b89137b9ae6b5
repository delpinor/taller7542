#include "../Model/Model_Jugador.h"
#define MARGENDESELECCION 0

Jugador::Jugador()
{
    this->estado = &(this->inactivo);
    this->mCollider.x = this->estado->getPosX();
    this->mCollider.y = this->estado->getPosY();
    this->mCollider.w = ANCHO_JUGADOR;
    this->mCollider.h = ALTO_JUGADOR;
    this->direccion=00.0;
}

void Jugador::setPosInitX(int posX)
{
    this->estado->setPosInitX(posX);
}

void Jugador::setPosInitY(int posY)
{
    this->estado->setPosInitY(posY);
}

void Jugador::setDireccion(double direccion)
{
    this->direccion=direccion;
}


void Jugador::move()
{
    this->estado->move();
    updateDirection();
    this->mCollider.x = this->estado->getPosX();
    this->mCollider.y = this->estado->getPosY();
}

int Jugador::getPosX()
{
    return this->estado->getPosX();
}

int Jugador::getPosY()
{
    return this->estado->getPosY();
}

void Jugador::setPosX(int PosX)
{
    this->estado->setPosX(PosX);
}

void Jugador::setPosY(int PosY)
{
    this->estado->setPosY(PosY);
}


void Jugador::disminuirVelocidadX()
{
    this->estado->disminuirVelocidadX();
}

void Jugador::disminuirVelocidadY()
{
    this->estado->disminuirVelocidadY();
}

void Jugador::aumentarVelocidadX()
{
    this->estado->aumentarVelocidadX();
}

void Jugador::aumentarVelocidadY()
{
    this->estado->aumentarVelocidadY();
}

int Jugador::getVelX()
{
    return this->estado->getVelX();
}

int Jugador::getVelY()
{
    return this->estado->getVelY();
}

void Jugador::detenerVelocidad()
{
    this->estado->detenerVelocidad();
}
bool Jugador::estaActivo()
{
    return this->estado->estaActivo();
}
void Jugador::activar()
{
    this->activo.copiarEstado(this->estado);
    this->estado = &(this->activo);
    this->detenerVelocidad();
}
void Jugador::desactivar()
{
    this->inactivo.copiarEstado(this->estado);
    this->estado = &(this->inactivo);
}
bool Jugador::collide(SDL_Rect * camara)
{

    int leftCam, leftJugador;
    int rightCam, rightJugador;
    int topCam, topJugador;
    int bottomCam, bottomJugador;

    leftCam = camara->x +MARGENDESELECCION;

    rightCam = camara->x + camara->w -MARGENDESELECCION;

    topCam = camara->y +MARGENDESELECCION;

    bottomCam = camara->y + camara->h -MARGENDESELECCION;

    leftJugador = this->mCollider.x;
    rightJugador = this->mCollider.x + this->mCollider.w;
    topJugador = this->mCollider.y;
    bottomJugador = this->mCollider.y + this->mCollider.h;

    if( bottomJugador <= topCam )
    {
        return false;
    }

    if( topJugador>= bottomCam )
    {
        return false;
    }

    if( leftJugador >= rightCam )
    {
        return false;
    }

    if( rightJugador <= leftCam )
    {
        return false;
    }

    return true;
}

double Jugador::getDireccion()
{
    return this->direccion;
}


void Jugador::updateDirection()
{

    if (this->estado->getVelX()>0)
    {
        direccion = 00;
        if (this->estado->getVelY()>0)
        {
            direccion += 45;
        }
        if (this->estado->getVelY()<0)
        {
            direccion -= 45;
        }
    }

    if (this->estado->getVelX()<0)
    {
        direccion = 180;
        if (this->estado->getVelY()<0)
        {
            direccion += 45;
        }
        if (this->estado->getVelY()>0)
        {
            direccion -= 45;
        }
    }


    if ((this->estado->getVelX()==0 )&& (this->estado->getVelY()!=0))
    {
        direccion = 90;
        if (this->estado->getVelY()<0)
        {
            direccion -= 90;
        }
        if (this->estado->getVelY()>0)
        {
            direccion += 90;
        }
    }


}

void Jugador::updateVelocidad ( int velx, int vely)
{
this->estado->setVelocidadX(velx);
this->estado->setVelocidadY(vely);

}


